<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<bean id="dataSourceTarget" class="com.alibaba.druid.pool.DruidDataSource"
				init-method="init" destroy-method="close">
				<property name="driverClassName" value="${db.driver}" />
				<property name="url" value="${db.url}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
				<property name="initialSize" value="${db.initialSize.sso.provider}" />
				<property name="minIdle" value="${db.minIdle.sso.provider}" />
				<property name="maxActive" value="${db.maxActive.sso.provider}" />
				<!-- 配置获取连接等待超时的时间 -->
				<property name="maxWait" value="${db.maxWait.sso.provider}" />
				<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
				<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis.sso.provider}" />
				<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
				<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis.sso.provider}" />
				<property name="defaultAutoCommit" value="false" />
				<!-- 打开PSCache，如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
				<property name="poolPreparedStatements" value="false" />
			</bean>
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="cn.uce.core.db.spring.DaoFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:mybatis/*.xml"></property>
		<property name="typeAliasesPackage" value="cn.uce.omg.vo,;cn.uce.omg.entity,;
												  cn.uce.omg.gateway.vo,;cn.uce.omg.gateway.entity,;
												  cn.uce.omg.sso.vo,;cn.uce.omg.sso.entity,;"></property>
	</bean>

	<bean id="queryPaginationAspect" class="cn.uce.core.db.interceptor.aop.QueryPaginationAspect">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="baseDao" class="org.mybatis.spring.mapper.MapperFactoryBean"
		abstract="true">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- AOP代理设置 -->
	<aop:config>
		<!-- 分页切入点 -->
		<aop:advisor id="paginationPointcut" advice-ref="queryPaginationAspect"
			pointcut="execution(* cn.uce.omg.*.dao.*.*(..)) or execution(* cn.uce.omg.dao.*.*(..))" />
	</aop:config>

	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<!-- 上传文件,需要将文件信息添加到数据库中. -->
			<tx:method name="upload" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- aop代理设置 -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* cn.uce.omg.sso.biz.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"
			order="1" />
	</aop:config>

	<!-- 暴露代理 -->
	<aop:aspectj-autoproxy expose-proxy="true" />

</beans>